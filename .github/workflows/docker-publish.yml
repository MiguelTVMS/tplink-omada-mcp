name: Publish Docker Images

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine image metadata
        id: meta
        env:
          REGISTRY: ${{ env.REGISTRY }}
        run: |
          set -euo pipefail
          owner_lower=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          ref="${GITHUB_REF}"

          if [[ "${ref}" == refs/tags/* ]]; then
            ref_name="${ref#refs/tags/}"
            cli_tags="${REGISTRY}/${owner_lower}/tplink-omada-mcp-cli:latest\n${REGISTRY}/${owner_lower}/tplink-omada-mcp-cli:${ref_name}"
            http_tags="${REGISTRY}/${owner_lower}/tplink-omada-mcp-http:latest\n${REGISTRY}/${owner_lower}/tplink-omada-mcp-http:${ref_name}"
          else
            ref_name="${GITHUB_HEAD_REF:-${ref#refs/heads/}}"
            sanitized=$(echo "${ref_name}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
            cli_tags="${REGISTRY}/${owner_lower}/tplink-omada-mcp-cli:${sanitized}"
            http_tags="${REGISTRY}/${owner_lower}/tplink-omada-mcp-http:${sanitized}"
          fi

          echo "owner_lower=${owner_lower}" >> "${GITHUB_OUTPUT}"
          {
            echo "cli_tags<<EOF"
            echo "${cli_tags}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"
          {
            echo "http_tags<<EOF"
            echo "${http_tags}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push CLI image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.cli_tags }}

      - name: Build and push HTTP image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.http
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.http_tags }}
